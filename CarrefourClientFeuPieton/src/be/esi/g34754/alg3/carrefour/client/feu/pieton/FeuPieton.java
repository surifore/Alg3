/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package be.esi.g34754.alg3.carrefour.client.feu.pieton;

import be.esi.g34754.alg3.carrefour.CouleurEnum;
import be.esi.g34754.alg3.carrefour.FeuModeleInterface;
import be.esi.g34754.alg3.carrefour.interfaces.CarrefourServeurInterface;
import be.esi.g34754.alg3.carrefour.interfaces.CarrefourView;
import java.awt.Color;
import java.io.Serializable;
import java.rmi.RemoteException;
import javax.swing.JOptionPane;

/**
 * Panel contenant les feux vert et rouge d'un feu Pieton.
 *
 * @author Florian Delporte
 */
public class FeuPieton extends javax.swing.JPanel implements Serializable {

    private CarrefourServeurInterface serveur;
    private FeuModeleInterface model;
    private CarrefourView client;
    private boolean axeNS;

    /**
     * Creates new form FeuPieton
     *
     * @param serveur Le serveur du carrefour qui contient le modèle du
     * carrefour.
     */
    public FeuPieton(CarrefourServeurInterface serveur) {
        if (serveur == null) {
            throw new IllegalArgumentException("Le serveur doit avoir une valeur.");
        }
        try {
            initComponents();
            this.serveur = serveur;
            ledRouge.setColor(Color.red);
            ledVert.setColor(Color.green);
            ledVert.setMultiplicateur(serveur.getModel().getVitesse());
            client = new FeuPietonImpl(this);
            axeNS = true;
            initLed();
            serveur.addListener(client);
        } catch (RemoteException ex) {
            miseEnPanne();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Creates new form FeuPieton
     *
     * @param model Le modèle du carrefour.
     */
    public FeuPieton(FeuModeleInterface model) {
        try {
            initComponents();
            this.model = model;
            ledRouge.setColor(Color.red);
            ledVert.setColor(Color.green);
            ledVert.setMultiplicateur(model.getVitesse());
            client = new FeuPietonImpl(this);
            axeNS = true;
            initLed();
            model.addCarrefourListener(client);
        } catch (RemoteException ex) {
            miseEnPanne();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Creates new form FeuPieton qui n'est pas abonné à un modèle
     */
    public FeuPieton() {
        initComponents();
        this.model = null;
        ledRouge.setColor(Color.red);
        ledVert.setColor(Color.green);
        client = null;
        axeNS = true;
    }

    /**
     * Permet d'assigner un modèle au FeuPieton
     *
     * @param model Le modèle à assigner au modèle.
     */
    public void setModel(FeuModeleInterface model) {
        try {
            this.model = model;
            ledVert.setMultiplicateur(model.getVitesse());
            client = new FeuPietonImpl(this);
            model.addCarrefourListener(client);
        } catch (RemoteException ex) {
            miseEnPanne();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Permet de renseigner l'axe du FeuPieton.
     *
     * @param axeNS L'axe du FeuPieton. Vrai si le FeuPieton se trouve sur l'axe
     * Nord-Sud.
     */
    public void setAxeNS(boolean axeNS) {
        this.axeNS = axeNS;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ledVert = new be.esi.g34754.alg3.carrefour.outils.Led();
        ledRouge = new be.esi.g34754.alg3.carrefour.outils.Led();

        setMaximumSize(new java.awt.Dimension(103, 213));
        setMinimumSize(new java.awt.Dimension(103, 213));

        ledVert.setColor(java.awt.Color.green);

        javax.swing.GroupLayout ledVertLayout = new javax.swing.GroupLayout(ledVert);
        ledVert.setLayout(ledVertLayout);
        ledVertLayout.setHorizontalGroup(
            ledVertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
        );
        ledVertLayout.setVerticalGroup(
            ledVertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        ledRouge.setClignotant(false);
        ledRouge.setColor(java.awt.Color.red);

        javax.swing.GroupLayout ledRougeLayout = new javax.swing.GroupLayout(ledRouge);
        ledRouge.setLayout(ledRougeLayout);
        ledRougeLayout.setHorizontalGroup(
            ledRougeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
        );
        ledRougeLayout.setVerticalGroup(
            ledRougeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ledRouge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(ledVert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ledRouge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ledVert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private be.esi.g34754.alg3.carrefour.outils.Led ledRouge;
    private be.esi.g34754.alg3.carrefour.outils.Led ledVert;
    // End of variables declaration//GEN-END:variables

    /**
     * Permet d'initialiser les Led du FeuPieton.
     */
    public final void initLed() {
        if (serveur != null) {
            try {
                if (axeNS) {
                    setLeds(serveur.getModel().getEtat().getFeuxP_NS());
                } else {
                    setLeds(serveur.getModel().getEtat().getFeuxP_EO());
                }
            } catch (RemoteException ex) {
                miseEnPanne();
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        } else if (axeNS) {
            setLeds(model.getEtat().getFeuxP_NS());
        } else {
            setLeds(model.getEtat().getFeuxP_EO());
        }
    }

    /**
     * Permet de mettre à jour l'etat des Led du FeuPieton
     *
     * @param feu le Feu du modèle
     */
    public void setLeds(be.esi.g34754.alg3.carrefour.FeuPieton feu) {
        if (feu.isEnPanne()) {
            ledRouge.setOn(false);
            ledVert.setOn(false);
        } else if (feu.getEtat().getCouleur() == CouleurEnum.VERT) {
            if (feu.getEtat().isClignotant()) {
                ledRouge.setOn(false);
                ledVert.setOn(true);
                ledVert.setClignotant(true);
            } else {
                ledRouge.setOn(false);
                ledVert.setOn(true);
                ledVert.setClignotant(false);
            }
        } else {
            ledRouge.setOn(true);
            ledVert.setOn(false);
            ledVert.setClignotant(false);
        }
    }

    /**
     * Permet de retirer le FeuPieton du modèle
     */
    public void removeFromModel() {
        model.removeCarrefourListener(client);
    }

    /**
     * Permet de désactiver les Led du FeuPieton
     */
    public void clearLed() {
        ledRouge.setOn(false);
        ledVert.setOn(false);
        ledVert.setClignotant(false);
    }

    /**
     * Permet au piéton de demander que le feu pieton passe au vert
     *
     * @throws RemoteException En cas de problème de communication avec le
     * serveur.
     */
    void demandeVert() throws RemoteException {
        serveur.demandeVert(axeNS);
    }

    /**
     * Permet au FeuPieton d'être mis en panne en cas de problème
     */
    private void miseEnPanne() {
        ledRouge.setOn(false);
        ledVert.setOn(false);
    }

    public void desabonner() throws RemoteException {
        serveur.removeListener(client);
    }

}
